<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BFC的理解</title>
      <link href="/2020/03/01/css/BFC%E7%90%86%E8%A7%A3/"/>
      <url>/2020/03/01/css/BFC%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h2><p><strong>官方定义：</strong>BFC（Block Formatting Context）块格式化上下文， 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。<br>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。 我们经常使用到BFC，只不过不知道它是BFC而已。</p><h2 id="怎么创建BFC"><a href="#怎么创建BFC" class="headerlink" title="怎么创建BFC"></a>怎么创建BFC</h2><ul><li>浮动元素（元素的float不是 none，指定float为left或者right就可以创建BFC）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>display:inline-block，display:table-cell，display:flex，display:inline-flex</li><li>overflow指定除了visible的值<h2 id="它有什么特点"><a href="#它有什么特点" class="headerlink" title="它有什么特点"></a>它有什么特点</h2></li><li>在BFC中，块级元素从顶端开始垂直地一个接一个的排列。块级元素不在BFC中也会垂直排序</li><li>如果两个块级元素属于同一个BFC，它们的上下margin会重叠（或者说折叠），以较大的为准。但是如果两个块级元素分别在不同的BFC中，它们的上下边距就不会重叠了，而是两者之和。</li><li><strong>BFC的区域不会与浮动的元素区域重叠</strong>，也就是说不会与浮动盒子产生交集，而是紧贴浮动边缘</li><li>计算BFC的高度时，浮动元素也参与计算。BFC可以包含浮动元素。（利用这个特性可以清除浮动）</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素<h2 id="它有什么用"><a href="#它有什么用" class="headerlink" title="它有什么用"></a>它有什么用</h2></li><li>解决外边距折叠问题<br>外边距折叠也只会发生在属于同一BFC的块级元素之间</li><li>制作两栏布局<br>BFC的区域不会与浮动的元素区域重叠。<br>我们可以利用这个特性来创建CSS中常用的两栏布局（左边宽度固定，右边宽度自适应）。<h2 id="清除元素内部的浮动"><a href="#清除元素内部的浮动" class="headerlink" title="清除元素内部的浮动"></a>清除元素内部的浮动</h2>这里清除浮动的意思并不是清除你设置的元素的浮动属性，而是清除设置了浮动属性之后给别的元素带来的影响。例如我们给子元素设置浮动，那么父元素的高度就撑不开了。<br>BFC有一个特性：计算BFC的高度时，浮动元素也参与计算，利用这个特性可以清除浮动。</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery插件封装</title>
      <link href="/2019/10/11/jquery/%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
      <url>/2019/10/11/jquery/%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<ul><li>封装一个表格插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#table1&#x27;</span>).<span class="title function_">table</span>([<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;地址&quot;</span>,<span class="string">&#x27;手机&#x27;</span>],[</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;小王&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">address</span>:<span class="string">&quot;上海&quot;</span>,<span class="attr">phone</span>:<span class="string">&quot;我是手机号&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;小红&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">address</span>:<span class="string">&quot;北京&quot;</span>,<span class="attr">phone</span>:<span class="string">&quot;我是手机号&quot;</span>&#125;,</span><br><span class="line">])</span><br><span class="line"><span class="comment">//插件定义</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    <span class="comment">//给jQuery的原型添加方法</span></span><br><span class="line">   $.fn.<span class="property">table</span>=<span class="keyword">function</span>(<span class="params">tableHeaders,tableBodys</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> list=[]</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;table&gt;&quot;</span>)</span><br><span class="line">        <span class="comment">//生成表头</span></span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;thead&gt;&quot;</span>)</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tableHeaders.<span class="property">length</span>;i++)&#123;</span><br><span class="line">list.<span class="title function_">push</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line">            list.<span class="title function_">push</span>(tableHeaders[i])</span><br><span class="line">            list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/thead&gt;&quot;</span>)</span><br><span class="line">        <span class="comment">//生成表格主题部分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tableBodys.<span class="property">length</span>;i++)&#123;</span><br><span class="line">list.<span class="title function_">push</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> tableBodys[i])&#123;</span><br><span class="line">                list.<span class="title function_">push</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line">                list.<span class="title function_">push</span>(tableBodys[i][key])</span><br><span class="line">                list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="string">&quot;&lt;/table&gt;&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">html</span>(list.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP的几种请求方法用途</title>
      <link href="/2019/10/11/%E7%BD%91%E7%BB%9C/http/"/>
      <url>/2019/10/11/%E7%BD%91%E7%BB%9C/http/</url>
      
        <content type="html"><![CDATA[<h2 id="http请求方式"><a href="#http请求方式" class="headerlink" title="http请求方式"></a>http请求方式</h2><ul><li>GET<br>  GET请求会向数据库获取信息，只是用来查询数据，不会修改，增加数据。使用URL传递参数，对所发送的数量有限制，一般在2000字符</li><li>POST<br>  向URL指定的资源提交数据或附加新的数据，大小一般没有限制，POST安全性高，POST不会被缓存</li><li>PUT<br>  跟POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST没有</li><li>HEAD<br>  只请求页面的首部</li><li>DELETE<br>  删除服务器上的某资源<br>  删除服务器上的某个资源<br>  请求服务器删除指定的页面。<br>  DELETE请求一般返回3种码<br>  200（OK）——删除成功，同时返回已经删除的资源。<br>  202（Accepted）——删除请求已经接受，但没有被立即执行（资源也许已经被转移到了待删除区域）。</li><li>OPTIONS<br>  它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“GET,POST”这样的信息</li><li>TRACE<br>  TRACE方法被用于激发一个远程的，应用层的请求消息回路</li><li>CONNECT<br>  把请求连接转换到透明的TCP/IP通道</li></ul>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery插件</title>
      <link href="/2019/10/10/jquery/%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/10/jquery/%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>插件网址：</p><ul><li><a href="https://www.jq22.com/">https://www.jq22.com/</a></li><li><a href="https://jqueryui.com/">https://jqueryui.com/</a></li></ul><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul><li>颜色插件</li><li>省级联动</li><li>jQueryUI<ul><li>常用的2-3个功能演示</li></ul></li></ul><h2 id="jQuery插件开发"><a href="#jQuery插件开发" class="headerlink" title="jQuery插件开发"></a>jQuery插件开发</h2><ul><li>给jQuery增加方法的两种方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.method=fu     <span class="comment">//静态方法</span></span><br><span class="line">$.fn.<span class="property">method</span>=fn  <span class="comment">//实例方法</span></span><br></pre></td></tr></table></figure><ul><li>添加一个静态方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.add=<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="插件封装"><a href="#插件封装" class="headerlink" title="插件封装"></a>插件封装</h3><ul><li>给jQuery原型添加方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插件定义</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    <span class="comment">//给jQuery的原型添加方法</span></span><br><span class="line">   $.fn.<span class="property">bgColor</span>=<span class="keyword">function</span>(<span class="params">bgcolor</span>)&#123;</span><br><span class="line">        <span class="comment">//this是调用此方法的jQuery对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>,bgcolor)</span><br><span class="line">        <span class="comment">//返回调用此方法的jQuery本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery))</span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">width</span>(<span class="number">100</span>),<span class="title function_">height</span>(<span class="number">100</span>).<span class="title function_">bgColor</span>(<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>直接给jQuery添加方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插件定义</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    <span class="comment">//给jQuery的原型添加方法</span></span><br><span class="line">   $.bgColor=<span class="keyword">function</span>(<span class="params">bgcolor</span>)&#123;</span><br><span class="line">        <span class="comment">//this是调用此方法的jQuery对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>,bgcolor)</span><br><span class="line">        <span class="comment">//返回调用此方法的jQuery本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(jQuery))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery网络请求</title>
      <link href="/2019/10/10/jquery/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/10/10/jquery/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27; &#x27;</span>, <span class="comment">// 请求类型 取值：GET 或 POST</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27; &#x27;</span>, <span class="comment">// 请求URL地址</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;, <span class="comment">// 请求所携带的数据</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125; <span class="comment">// 请求成功后的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h3><p>用来发起 get 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure><ul><li>url 请求URL地址 </li><li>data 请求资源期间要携带的参数 类型是object</li><li>callback <h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3>用来发起 post 请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure>参数和get一样</li></ul>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery事件机制</title>
      <link href="/2019/10/08/jquery/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/10/08/jquery/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>JavaScript中已经学习过了事件,jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</li></ul><h3 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a>jQuery事件发展历程(了解)</h3><p>简单事件绑定–bind事件绑定–delegate事件绑定–on事件绑定(推荐)</p><ul><li>简单事件注册</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">click</span>(handler)        <span class="comment">//单击事件</span></span><br><span class="line"><span class="title function_">mouseenter</span>(handler)   <span class="comment">//鼠标进入事件</span></span><br><span class="line"><span class="title function_">mouseleave</span>(hander)   <span class="comment">//鼠标离开事件</span></span><br></pre></td></tr></table></figure><p>缺点：不能同时注册多个事件，也不支持动态注册</p><ul><li>bind方式注册</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：事件类型</span></span><br><span class="line"><span class="comment">//第二个参数：事件处理程序</span></span><br><span class="line"><span class="comment">//写法一：</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;click mouseenter&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//事件响应</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;click mouseenter&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">click</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">mouseenter</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>delegate注册委托</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：selector,要绑定事件的元素</span></span><br><span class="line"><span class="comment">//参数2：事件类型</span></span><br><span class="line"><span class="comment">//参数3：事件处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法1</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">delegate</span>(<span class="string">&quot;P&quot;</span>,<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//给#div1下所有的p标签绑定事件  </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">delegate</span>(<span class="string">&quot;P&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">click</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>on注册事件（重要）</p><ul><li>jQuery1.7之后，jQuery用on统一了所有事件的处理方法</li><li>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用</li></ul><p>on注册简单事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给$(selector)绑定事件，并由自己触发，不支持动态绑定</span></span><br><span class="line">$(selector).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>on委托注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示给$(selector)绑定代理事件，当必须是它内部元素span才能触发，支持动态加载</span></span><br><span class="line">$(selector).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;span,div&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><ul><li>unbind(不用)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">unbind</span>()<span class="comment">//解除所有事件</span></span><br><span class="line">$obj.<span class="title function_">unbind</span>(<span class="string">&quot;click&quot;</span>)<span class="comment">//解除指定事件</span></span><br></pre></td></tr></table></figure><ul><li>undelegate(不用)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">undelegate</span>()<span class="comment">//解除所有delegate事件</span></span><br><span class="line">$obj.<span class="title function_">undelegate</span>(<span class="string">&quot;click&quot;</span>)<span class="comment">//解除所有click事件</span></span><br></pre></td></tr></table></figure><ul><li>off(推荐)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">off</span>()<span class="comment">//解除元素的所有事件</span></span><br><span class="line">$obj.<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>)<span class="comment">//解除元素的click事件</span></span><br></pre></td></tr></table></figure><h3 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">click</span>()<span class="comment">//触发click事件</span></span><br><span class="line">$obj.<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="jQuery的事件对象"><a href="#jQuery的事件对象" class="headerlink" title="jQuery的事件对象"></a>jQuery的事件对象</h3><ul><li>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// screenX和screenY 对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">// clientX和clientY 距离页面左上角的位置( 忽视滚动条)</span></span><br><span class="line"><span class="comment">// pageX和pageY距离页面最顶部的左上角的位置( 会计算滚动条的距离)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.stopPropagation() 阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">// event.preventDefault()  阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">// return false:既能阳止事件冒泡，又能阻止浏览器默认行为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.keyCode 按下的键盘代码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery知识点补充</title>
      <link href="/2019/10/08/jquery/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/"/>
      <url>/2019/10/08/jquery/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<pre><code>## jQuery知识点补充    ###     链式编程* 通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回jQuery对象  什么时候可以链式编程  * 如果调用一个方法，这个方法有返回值，并且这个返回值是一个jQuery对象，那就可以继续使用jQuery方法  * 必须是jQuery对象才能点出jQuery方法  * 有的时候方法返回的是一个jQuery对象，但是这个对象不是我们用的对象，就不要继续链式编程<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">end</span>()<span class="comment">// 筛选选择器会改变Query对象的DOM对象，想要复到上一次的状态，并且返回匹配元素之前的状态。</span></span><br><span class="line"><span class="comment">//回到上一个状态</span></span><br><span class="line"><span class="comment">//end()也是一个jQuery方法他也需要jQuery对象点出来</span></span><br></pre></td></tr></table></figure>###     each()方法* jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了作用:遍历jQuery对象集合，为每个匹配的元素执行一个函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line"><span class="comment">// 参数二表示当前元素( DOM对象)</span></span><br><span class="line">$obj.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,element</span>)&#123;&#125;);</span><br></pre></td></tr></table></figure>###     多库共存* jQuery使用作为标示符，但是如果与其他框架中的冲突时，jQuery可以释放$符的控制权<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=$.<span class="title function_">noConflict</span>()<span class="comment">//释放$控制权,并把$给c</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看jQuery版本</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery.<span class="property">fn</span>.<span class="property">jquery</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery.<span class="property">prototye</span>.<span class="property">jquery</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($.fn.<span class="property">jquery</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($.prototye.<span class="property">jquery</span>)</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery属性操作</title>
      <link href="/2019/10/06/jquery/%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/10/06/jquery/%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h2><ul><li><p>attr()</p><ul><li>设置单属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;路径&quot;</span>)<span class="comment">//如果存在src就更换 </span></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;我是自定义属性&quot;</span>)<span class="comment">//修改自定义属性</span></span><br><span class="line"><span class="comment">//如果元素没有这个属性就添加这个属性</span></span><br></pre></td></tr></table></figure></li><li>设置多属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">    <span class="attr">src</span>:<span class="string">&quot;路径&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aaa&quot;</span>:<span class="string">&quot;我是自定义属性&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>获取属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>removeAttr()</p><ul><li>移除属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除单个属性</span></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;src&quot;</span>)</span><br><span class="line"><span class="comment">//删除多个属性</span></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;src aaa bbb&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>prop()操作布尔类型属性</p><ul><li><p>类似checked这样的属性在元素身上表示选择，没有表示没有选中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#ipt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;checked&quot;</span>)<span class="comment">//无论选择还是没选择都是undefined</span></span><br></pre></td></tr></table></figure><p>! 注意在jQuery1.6之后checked、selectd、disabled这类Boolean类型属性 不能用attr()方法 只能用prop()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#ipt&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>) <span class="comment">//返回布尔值</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="jQuery尺寸和位置操作"><a href="#jQuery尺寸和位置操作" class="headerlink" title="jQuery尺寸和位置操作"></a>jQuery尺寸和位置操作</h2><h3 id="windth方法height方法"><a href="#windth方法height方法" class="headerlink" title="windth方法height方法"></a>windth方法height方法</h3><ul><li>设置或者获取高度，不包括内边距、边框和外边距</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数表示设置高度</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">height</span>(<span class="number">200</span>);</span><br><span class="line"><span class="comment">// 不带参数获取高度</span></span><br><span class="line">$(<span class="string">&quot;img&#x27;).height();</span></span><br></pre></td></tr></table></figure><ul><li>获取网页的可视区宽高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取可视区宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">width</span>();</span><br><span class="line"><span class="comment">// 获取可视区高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">height</span>();</span><br></pre></td></tr></table></figure><h3 id="innerWidth-innerHeight-outerWidth-outerHeight"><a href="#innerWidth-innerHeight-outerWidth-outerHeight" class="headerlink" title="innerWidth/innerHeight/outerWidth/outerHeight"></a>innerWidth/innerHeight/outerWidth/outerHeight</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">innerWidth</span>()/<span class="title function_">innerHeight</span>()方法返回元素的宽度/高度( 包括内边距)</span><br><span class="line"><span class="title function_">outerwidth</span>()/<span class="title function_">outerHeight</span>() 方法返回元素的宽度/高度(包括内边距和边框)</span><br><span class="line"><span class="title function_">outerWidth</span>(<span class="literal">true</span>)/<span class="title function_">outerHeight</span>(<span class="literal">true</span>) 方法返元素的宽度/高度(包括内边距、边框和外边距)</span><br></pre></td></tr></table></figure><h3 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h3><ul><li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(offsetParent)的位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素距离document的位置,返回值为对象:&#123;left:108，top:100)</span></span><br><span class="line">$(selector).<span class="title function_">offset</span>();</span><br><span class="line"><span class="comment">//获取相对于其最近的有定位的父元素的位置</span></span><br><span class="line">$(selector).<span class="title function_">position</span>();</span><br></pre></td></tr></table></figure><h3 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h3><ul><li>设置或者获取垂直滚动条的位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line"><span class="comment">// 获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollLeft</span>();</span><br><span class="line"><span class="comment">// 设置页面被卷曲的高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 设置页面卷曲的宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollLeft</span>(<span class="number">60</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery节点操作</title>
      <link href="/2019/10/06/jquery/%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/10/06/jquery/%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><ul><li>html()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取内容：不写参数</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>()</span><br><span class="line"><span class="comment">//设置内容:添加参数</span></span><br><span class="line"><span class="comment">//会把原来的内容覆盖</span></span><br><span class="line"><span class="comment">//可以识别标签</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;我是内容&lt;a&gt;百度一下&lt;/a&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>$()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//能创建内容 但创建的内容只存在内存中 如果要显示需要追加</span></span><br><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//追加</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">append</span>($link)</span><br></pre></td></tr></table></figure><pre><code>###     添加节点</code></pre><ul><li>append()<ul><li>在元素内最后插入</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父节点.append(子节点)</span></span><br><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">append</span>($link)</span><br><span class="line"><span class="comment">//存在页面的元素会被剪切出去</span></span><br><span class="line"><span class="keyword">var</span> $link1=$(<span class="string">&quot;#link1&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#ul&quot;</span>).<span class="title function_">apend</span>($link1)</span><br></pre></td></tr></table></figure><ul><li>prepend()<ul><li>在元素内最前面插入</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父节点.prepend(子节点)</span></span><br><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">prepend</span>($link)</span><br><span class="line"><span class="comment">//存在页面的元素会被剪切出去</span></span><br><span class="line"><span class="keyword">var</span> $link1=$(<span class="string">&quot;#link1&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#ul&quot;</span>).<span class="title function_">prepend</span>($link1)</span><br></pre></td></tr></table></figure><ul><li>before()<ul><li>兄弟元素添加—添加到元素前面</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素A.before(元素B) 把元素B插入到了元素A前面</span></span><br><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">before</span>($link)</span><br></pre></td></tr></table></figure><ul><li>after()<ul><li>兄弟元素添加—添加到元素后面</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素A.before(元素B) 把元素B插入到了元素A后面</span></span><br><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">after</span>($link)</span><br></pre></td></tr></table></figure><ul><li>appendTo()<ul><li>子元素向父元素插入—出现在父元素内的最后</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $link=$(<span class="string">&quot;&lt;a&gt;我是a标签&lt;/a&gt;&quot;</span>)</span><br><span class="line">$link.<span class="title function_">appendTo</span>($(<span class="string">&quot;#ul1&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="清空节点"><a href="#清空节点" class="headerlink" title="清空节点"></a>清空节点</h3><ul><li><p>html()</p><ul><li>不推荐，有可能造成内存泄漏，不安全</li></ul></li><li><p>empty()</p><ul><li>隐式迭代移除元素 不仅删除了元素 还移除了事件</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">empty</span>()</span><br></pre></td></tr></table></figure><p>!注意：只是清空了内容 但是元素还在</p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><ul><li>remove()<ul><li>​    元素自杀 本质还是找到父元素 执行removeChild()方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$obj.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul><li>clone()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只存在内存中 如果要显示需要追加</span></span><br><span class="line"><span class="comment">//clone()有参数 布尔值 不管是true还是false 都会克隆到后代元素</span></span><br><span class="line"><span class="comment">//参数如果是true会把事件一起克隆 false不会 默认是false</span></span><br><span class="line"><span class="keyword">var</span> $yuan=$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">clone</span>()</span><br></pre></td></tr></table></figure><h3 id="获取表单元素的值"><a href="#获取表单元素的值" class="headerlink" title="获取表单元素的值"></a>获取表单元素的值</h3><ul><li>val()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不写参数是获取</span></span><br><span class="line">$(<span class="string">&quot;#text&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="comment">//写参数是赋值</span></span><br><span class="line">$(<span class="string">&quot;#text&quot;</span>).<span class="title function_">val</span>(”我是内容“)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery操作类、动画</title>
      <link href="/2019/10/05/jquery/%E7%B1%BB%E3%80%81%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/10/05/jquery/%E7%B1%BB%E3%80%81%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h2><ul><li>添加类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(#div1).<span class="title function_">addclass</span>(<span class="string">&quot;funtSize30&quot;</span>)<span class="comment">//添加一个类</span></span><br><span class="line">$(#div1).<span class="title function_">addclass</span>(<span class="string">&quot;funtSize30  wuaaa&quot;</span>)<span class="comment">//添加多个类</span></span><br></pre></td></tr></table></figure><ul><li>移除类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;funtSize30&quot;</span>)<span class="comment">//删除一个类</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;funtSize30  wuaaa&quot;</span>)<span class="comment">//删除多个类</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">addclass</span>()<span class="comment">//删除所有类</span></span><br></pre></td></tr></table></figure><ul><li>判断类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个元素有没有某个类 返回布尔值</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">hasclass</span>(<span class="string">&quot;funtSize30&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>切换类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果某个元素有某个类就移除这个类，如果元素没有这个类就添加这个类</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">toggleclass</span>(<span class="string">&quot;funtSize30&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h2><ul><li>jQuery提供了三组基本动画这些动画都是标准的，有规律的效果，jQuery还提供了自定义动画的功能</li></ul><h3 id="三组基本动画"><a href="#三组基本动画" class="headerlink" title="三组基本动画"></a>三组基本动画</h3><ul><li>显示(show)与隐藏(hide)是一组动画</li><li>滑入(slideDown)与滑出(slideUp)与切换(slideToggle)，效果与卷帘门类似</li><li>淡入(fadeIn)与淡出(fadeOut)与切换(fadeToggle)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$obj.方法(speed,callback)</span><br><span class="line"><span class="comment">//seed(可选)：动画执行时间</span></span><br><span class="line"><span class="comment">//不传值没有动画效果</span></span><br><span class="line"><span class="comment">//毫秒数，动画执行的时间</span></span><br><span class="line"><span class="comment">//字符串，slow(600) normal(400) fast(200) 如果传入其他字符串均为normal</span></span><br></pre></td></tr></table></figure><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><ul><li>animate()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：必选的 对象 代表的需要做动画的属性</span></span><br><span class="line"><span class="comment">//参数2：可选的 代表执行动画的时长</span></span><br><span class="line"><span class="comment">//参数3：可选的 easing代表缓动还是匀速  linear(匀速) swing(缓动) 默认缓动</span></span><br><span class="line"><span class="comment">//参数4：动画执行完毕后的回调函数</span></span><br><span class="line">$obj.<span class="title function_">animate</span>(</span><br><span class="line">    &#123;<span class="attr">left</span>:<span class="number">800</span>&#125;,<span class="comment">//参数1</span></span><br><span class="line">    <span class="number">2000</span>,<span class="comment">//参数2</span></span><br><span class="line">    <span class="string">&quot;linear&quot;</span>,<span class="comment">//参数3</span></span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行完了&quot;</span>)&#125;<span class="comment">//参数4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="动画队列与停止动画"><a href="#动画队列与停止动画" class="headerlink" title="动画队列与停止动画"></a>动画队列与停止动画</h3><ul><li>在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放到动画队列中，等前面的动画执行完成了才会执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stop停止动画</span></span><br><span class="line">$obj.<span class="title function_">stop</span>(clearQueue,jumptoEnd)</span><br><span class="line"><span class="comment">//参数1：是否清除队列 参数类型true false </span></span><br><span class="line"><span class="comment">//参数2：是否跳转到最终效果 参数类型true false</span></span><br><span class="line"><span class="comment">//如果不写参数默认就是两个false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery设置、获取文本内容text()</title>
      <link href="/2019/10/04/jquery/text()%E6%96%B9%E6%B3%95%E3%80%81css()%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/04/jquery/text()%E6%96%B9%E6%B3%95%E3%80%81css()%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="设置、获取文本内容text"><a href="#设置、获取文本内容text" class="headerlink" title="设置、获取文本内容text()"></a>设置、获取文本内容text()</h2><h3 id="text不填参数"><a href="#text不填参数" class="headerlink" title="text不填参数"></a>text不填参数</h3><ul><li>会获取到标签中所有的文本包括后代元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#getBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//获取id为div1的文本</span></span><br><span class="line">            <span class="comment">//会获取到标签中所有的文本包括后代元素的文本</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#div1&#x27;</span>).<span class="title function_">text</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>包含多个dom元素的jQuery对象，通过text()，会把所有dom元素的文本获取到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#getBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//获取div</span></span><br><span class="line">            <span class="comment">//包含多个dom元素的jQuery对象，通过text()，会把所有dom元素的文本获取到</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">text</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="填入参数"><a href="#填入参数" class="headerlink" title="填入参数"></a>填入参数</h3><ul><li>设置文本会覆盖掉它原来的文本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#setBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//给id为div1的标签设置文本</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;我是文本&quot;</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li>如果这个文本中包含标签也是不会解析出来的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#setBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//给id为div1的标签设置文本</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;我是文本&lt;a&gt;我是链接&lt;/a&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>包含多个dom元素的jQuery对象，通过text()，会把所有dom元素的文本都设置上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#setBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;我是文本&quot;</span>)<span class="comment">//隐式迭代</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取、设置样式css"><a href="#获取、设置样式css" class="headerlink" title="获取、设置样式css()"></a>获取、设置样式css()</h2><ul><li>获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(元素).<span class="title function_">css</span>(属性名)</span><br></pre></td></tr></table></figure><p>! 注意:获取多个元素时只能获取第一个</p><ul><li>设置样式<ul><li>设置单样式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(元素).<span class="title function_">css</span>(属性名,值)</span><br></pre></td></tr></table></figure></li><li>设值多样式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(元素).<span class="title function_">css</span>(&#123;</span><br><span class="line">  属性名:值</span><br><span class="line">  <span class="string">&quot;属性名&quot;</span>:值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>! 注意：可以给多个元素设置 隐式迭代</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器、过滤器</title>
      <link href="/2019/10/04/jquery/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2019/10/04/jquery/%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”)</td><td>获取指定ID元素</td></tr><tr><td>类选择器</td><td>$(“#class”)</td><td>获取同一类class元素</td></tr><tr><td>标签选择器</td><td>$(“div”)</td><td>获取同一类标签元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”)</td><td>用 , 隔开，只要符合条件即可</td></tr><tr><td>交集选择器</td><td>$(“div.redclass”)</td><td>获取class为redclass的div元素</td></tr></tbody></table><ul><li>总结：和css选择器一样</li></ul><h3 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>子选择器</td><td>$(“ul&gt;li”)</td><td align="left">获取子元素  注意：不会获取孙子层次的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”)</td><td align="left">使用空格，代表后代选择器，获取ul元素下所有的li元素，包括孙子元等</td></tr></tbody></table><h3 id="jQuery过滤器"><a href="#jQuery过滤器" class="headerlink" title="jQuery过滤器"></a>jQuery过滤器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq(index)</td><td>$(“li:eq(2)”).css(“color”,’red’);</td><td>获取到的li元素中，选择所引号为2的元素，索引号index从0开始</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”,’red’);</td><td>获取到的li元素中，索引为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”,’red’);</td><td>获取到的li元素中，索引为偶数的元素</td></tr></tbody></table><h3 id="jQuery筛选过滤器的方法"><a href="#jQuery筛选过滤器的方法" class="headerlink" title="jQuery筛选过滤器的方法"></a>jQuery筛选过滤器的方法</h3><ul><li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法</li></ul><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(ul’).children(li)</td><td>相当于$(ul-li)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(ul).find(li’);</td><td>相当于$(ulli),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(#first’).siblings(li’);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(#first’).parent():</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(li’).eq(2);</td><td>相当于$(li:eq(2)),index从0开始</td></tr><tr><td>next()</td><td>$(li).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(li’).prev0)</td><td>找上一次兄弟</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2019/10/03/jquery/JQuery/"/>
      <url>/2019/10/03/jquery/JQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery是什么"><a href="#jQuery是什么" class="headerlink" title="jQuery是什么"></a>jQuery是什么</h2><p>jQuery是一个快速、小巧目功能丰富的JavaScript库，它使HTML文档的遍历和操作、事件处理、动画和Ajax等操作变得更加简单，并提供了一个易于使用的AP1，可以跨多种浏览器工作。结合了多功能性和可扩展性，jQuery改变了数百万人编写JavaScript的方式</p><h2 id="jQuery有什么优势与原生js的区别"><a href="#jQuery有什么优势与原生js的区别" class="headerlink" title="jQuery有什么优势与原生js的区别"></a>jQuery有什么优势与原生js的区别</h2><h3 id="分析一下，元素js的缺点"><a href="#分析一下，元素js的缺点" class="headerlink" title="分析一下，元素js的缺点:"></a>分析一下，元素js的缺点:</h3><ul><li>不能添加多个入口函数 (window.onload) ,如果添加了多个，后面的会把前面的给覆盖</li><li>原生js的api名字都太长太难记。</li><li>原生js有的时候代码冗余。</li><li>原生js中有些属性或者方法，有浏览器兼容问题。</li><li>原生is容错率比较低，前面的代码出了问题，后面的代码执行不了</li></ul><h3 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h3><ul><li>是可以写多个入口函数的。</li><li>jQuery的api名字都容易记忆</li><li>jQuery代码简洁 (隐式迭代)</li><li>jQuery帮我们解决了浏览器兼容问题。</li><li>容错率较高，前面的代码出来了问题，后面的代码不受影响</li></ul><h2 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h2><h3 id="jQuery的两种写法"><a href="#jQuery的两种写法" class="headerlink" title="jQuery的两种写法"></a>jQuery的两种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery入口函数和window-onload入口函数的区别"><a href="#jQuery入口函数和window-onload入口函数的区别" class="headerlink" title="jQuery入口函数和window.onload入口函数的区别"></a>jQuery入口函数和window.onload入口函数的区别</h3><ul><li>window.onload入口函数不能写多个，但是jQuery的入口函数是可以写多个的</li><li>执行时间不同jQuery入口函数要快于window.onload</li><li>jQuery入口函数要等待页面上dom树加载完成后执行 </li><li>window.onload要等待页面上的所有资源(dom树/外部css/js链接,图片)都加载完毕后执行</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="$函数"></a>$函数</h2><h3 id="jQuery文件的结构"><a href="#jQuery文件的结构" class="headerlink" title="jQuery文件的结构"></a>jQuery文件的结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">jQuery</span>=<span class="variable language_">window</span>.<span class="property">$</span>=jQuert</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>它其实是一个自执行函数</p><ul><li>引入一个js文件是会执行这个js文件中的代码的</li><li>jQuery文件是一个自执行的函数</li><li>这个自执行函数就是给window对象添加一个jQuery属性和$属性</li><li>$和jQuery是等价的，是一个函数</li><li>$是一个函数，参数传递不同效果也不同<ul><li>如果传递的参数是一个匿名函数—入口函数</li><li>如果参数传递的是一个字符串—选择器 / 创建一个标签</li><li>如果参数是一个dom对象，那他就会把dom对象转换为jQuery对象</li></ul></li></ul><h2 id="DOM对象和jQuery对象"><a href="#DOM对象和jQuery对象" class="headerlink" title="DOM对象和jQuery对象"></a>DOM对象和jQuery对象</h2><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><p>原生js选择器获取的对象 </p><p>特点：只能调用dom方法中的属性，不能调用jQuery的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">div1.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&#x27;red&#x27;</span><span class="comment">//dom对象是可以获取dom的属性或者方法</span></span><br><span class="line">div1.<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&#x27;green&#x27;</span>)<span class="comment">//报错 Uncaught TypeError: div1.css is not a function</span></span><br></pre></td></tr></table></figure><h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><p>​利用jQuery选择器获取到的对象</p><p>​特点：只能调用jQuery中的方法或属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div1=$(<span class="string">&#x27;#two&#x27;</span>)</span><br><span class="line">$div1.<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">$div1.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&#x27;red&#x27;</span><span class="comment">//报错ncaught TypeError: Cannot set properties of undefined</span></span><br></pre></td></tr></table></figure><h3 id="DOM对象与jQuery对象之间的转换"><a href="#DOM对象与jQuery对象之间的转换" class="headerlink" title="DOM对象与jQuery对象之间的转换"></a>DOM对象与jQuery对象之间的转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable constant_">DOM</span>对象)<span class="comment">//du,对象转jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> div1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">$(div1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//jQuery对象转DOM对象</span><br><span class="line">//下标获取</span><br><span class="line">var $div=$(&#x27;div&#x27;)</span><br><span class="line">var div1=$div[0]</span><br><span class="line">console.log(div1)</span><br><span class="line">//jQuery方法 get()</span><br><span class="line">var div2= $div.get(1)</span><br><span class="line">console.log(div2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2019/09/29/css/flex%E5%B8%83%E5%B1%80/"/>
      <url>/2019/09/29/css/flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>总体宽度及其中所有栏的值都以单位编写。这应使布局能够使用浏览器的指定基本字体大小缩放。 栏宽度将变得更宽, 能以任何大小显示更舒适、更可读的行长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><h3 id="flex-direction：子类在主轴上的分布"><a href="#flex-direction：子类在主轴上的分布" class="headerlink" title="flex-direction：子类在主轴上的分布"></a>flex-direction：子类在主轴上的分布</h3><p>flex items默认都是沿着main axis（主轴）从main start 开始往main end 方向排布<br>flex-direction决定了main axis的方向，有4个取值：</p><ul><li>row（默认）：从左往右</li><li>row-reverse：从右往左</li><li>column：从上往下</li><li>column-reverse：从下往上<h3 id="justify-content：子元素在主轴上对齐方式"><a href="#justify-content：子元素在主轴上对齐方式" class="headerlink" title="justify-content：子元素在主轴上对齐方式"></a>justify-content：子元素在主轴上对齐方式</h3></li></ul><p>justify-content决定了flex items在main axis 上的对齐方式，共6个取值：</p><ul><li>flex-start（默认值）：与 main start 对齐</li><li>flex-end：与 main end 对齐</li><li>center：居中对齐</li><li>space-between：flex items之间的距离相等，与main start、main end两端对齐</li><li>space-evenly：flex items之间的距离相等，与main start、main end之间距离等于flex items之间的距离</li><li>space-around：flex items之间的距离相等，与main start、main end之间距离等于flex items之间的距离的一半<h3 id="align-content：子类在交叉轴上的分布"><a href="#align-content：子类在交叉轴上的分布" class="headerlink" title="align-content：子类在交叉轴上的分布"></a>align-content：子类在交叉轴上的分布</h3></li></ul><p>align-content决定了多行flex items在cross axis上的对齐方式，用法和 justify-content类似，共7个取值：</p><ul><li>stretch（默认值）：与align-items的stretch类似</li><li>flex-start：与cross start对齐</li><li>flex-end：与cross end对齐</li><li>center：居中对齐</li><li>space-between：flex items之间的距离相等，与cross start、cross end两端对齐</li><li>space-evenly：flex items之间的距离相等，与cross start、cross end之间距离等于flex items之间的距离</li><li>space-around：flex items之间的距离相等，与cross start、cross end之间距离等于flex items之间的距离的一半</li></ul><h3 id="flex-wrap：子类的多行显示"><a href="#flex-wrap：子类的多行显示" class="headerlink" title="flex-wrap：子类的多行显示"></a>flex-wrap：子类的多行显示</h3><p>flex-wrap决定了flex container是单行还是多行，共3个取值：</p><ul><li>nowrap（默认）：单行</li><li>wrap：多行</li><li>wrap-reverse：多行（对比wrap，cross start与cross end相反）</li></ul><h2 id="flex-grow：子类的扩展"><a href="#flex-grow：子类的扩展" class="headerlink" title="flex-grow：子类的扩展"></a>flex-grow：子类的扩展</h2><p>flex-grow决定了flex items如何扩展</p><ul><li>可以设置任意非负数字（正小数、正整数、0），默认值为0</li><li>当flex container在main axis方向上有剩余size时，flex-grow属性才会有效<br>如果所有flex items的flex-grow总和sum超过1</li><li>每个flex items扩展的size = flex container的剩余size*flex-grow / sum<br>如果所有flex items的flex-grow总和sum不超过1</li><li>每个flex items扩展的size = flex container的剩余size*flex-grow<br>flex items扩展后的最终size不能超过max-width 、max-height<h2 id="flex-shrink：子类的收缩"><a href="#flex-shrink：子类的收缩" class="headerlink" title="flex-shrink：子类的收缩"></a>flex-shrink：子类的收缩</h2>flex-shrink决定了flex items如何收缩</li><li>可以设置任意非负数字（正小数、正整数、0），默认值为1</li><li>当flex items在main axis方向上超过了flex container的size时，flex-shrink属性才会有效<br>align-self：子类在交叉轴上的对齐方式</li></ul><h2 id="align-self：子类在交叉轴上的对齐方式"><a href="#align-self：子类在交叉轴上的对齐方式" class="headerlink" title="align-self：子类在交叉轴上的对齐方式"></a>align-self：子类在交叉轴上的对齐方式</h2><p>flex items可以通过align-self覆盖flex container设置的align-items，共6个取值：</p><ul><li>auto（默认值）：遵从flex container设置的align-items</li><li>stretch、flex-start、flex-end、center、baseline，效果和align-items一样</li></ul><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex是flex-grow，flex-shrink、flex-basis的简写，flex属性可以指定1/2/3个值</p><p><strong>单值语法：</strong></p><p>值必须为以下其中之一:</p><ul><li>一个无单位数：它会被当做flex-grow的值</li><li>一个有效的宽度值：它会被当作flex-basis的值</li><li>关键字none、auto或initial</li></ul><p><strong>双值语法：</strong><br>第一个值必须为一个无单位数，并且它会被当作flex-grow的值<br>第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当做flex-shrink的值</li><li>一个有效的宽度值：它会被当作flex-basis的值</li></ul><p><strong>三值语法：</strong></p><p>第一个值必须为一个无单位数，作为flex-grow的值</p><p>第二个值必须为一个无单位数，作为flex-shrink的值</p><p>第三个值必须为一个有效的宽度值：它会被当作flex-basis的值</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/2019/09/29/css/grid%E5%B8%83%E5%B1%80/"/>
      <url>/2019/09/29/css/grid%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><p>网格布局从名字上应该就能理解大致的样子，由行和列组成的表格，就和Excel差不多。网格布局中由一条条水平和竖直的的 网格线 围成一个个格子被称为 单元格<br>大致与flex布局一致</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: grid;</span><br></pre></td></tr></table></figure><h2 id="网格布局中的属性"><a href="#网格布局中的属性" class="headerlink" title="网格布局中的属性"></a>网格布局中的属性</h2><p>网格布局中的属性和flex属性类似，为了分类，一类为容器属性；一类是项目属性</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>触发网格布局<br>  给父元素添加display:grid;<br>  display关于网格的取值分为两个，grid（块网格）和inline-grid（行内网格，行内块）<br>  grid====容器从上向下排列<br>  inline====容器从左向右排列</li><li>行列划分<br>  规定行属性:grid-template-row;<br>  固定列属性:grid-template-column;<br>  后面的取值数量代表多少行，多少列  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>:<span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">grid-template-rows</span>:<span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>  <em><strong>取值：</strong></em><ul><li>绝对大小px</li><li>百分比</li><li>功能函数<br>  repeat(参数1，参数2)<br>  参数1：重复的次数，<br>  参数2：重复的次数或者重复的模式<br>  <strong>grid-template-columns:repeat(4,25%);<strong>等同于：</strong>grid-template-columns:25%,25%,25%,25%;</strong></li><li>auto-fill关键字（自动填充）配合功能函数使用<br>  <strong>grid-template-colums:repeat(auto-aill,33.33%);</strong><br>  当项目宽高固定，容器不固定的情况下，自动填充网格列数</li><li>fr关键字（列宽片段）<br>  为了方便表示比例关系，网格布局提供了fr关键字（fraction的缩写，意为片段）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍<br>  <strong>grid-template-rows:100px 1fr 100px;</strong><br>  若只有一行或者一列设置了1fr，就代表那一列或一行自适应宽度<br>  grid-template-columns:1fr 3fr 1fr;<br>  grid-template-rows:repeat(4,200px);</li><li>minmax()<br>  grid-template-rows:minmax(100px, 200px) 200px 300px;<br>  设置这一行或一列的最大值或者最小值，元素自适应</li><li>auto<br>  grid-template-rows:100px auto 200px;<br>  设置这一行或这一列的宽度高度自适应，直至充满整个容器的宽或者高<br>  自动占满剩余空间<h3 id="列间距"><a href="#列间距" class="headerlink" title="列间距"></a>列间距</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-row</span>-<span class="attribute">gap</span>:<span class="number">10px</span>   <span class="comment">/*行间距*/</span></span><br><span class="line">grid-column-gap:<span class="number">10px</span>   <span class="comment">/*列间距*/</span></span><br><span class="line">grid-gap:<span class="number">20px</span> <span class="number">20px</span>  <span class="comment">/*复合写法*/</span></span><br></pre></td></tr></table></figure>更新：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 旧版本 */</span></span><br><span class="line"><span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="comment">/* 新版本 */</span></span><br><span class="line"><span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h3 id="指定区域"><a href="#指定区域" class="headerlink" title="指定区域"></a>指定区域</h3>display:grid;<br>grid-template-columns:100px 100px 100px;<br>grid-template-rows:100px 100px 100px;<br>grid-template-areas:’a b c’ ‘d e f’ ‘g h i’;<br>将整个网格容器分为9个区域，每个区域对应一个单元格<br>通过grid-area  指定项目名称<br>isplay:grid;<br>grid-template-columns:repeat(3,100px);<br>grid-template-rows:repeat(3,100px);<br>grid-template-areas:’a a a’ ‘. . b’ ‘. c c’;<br>合并的时候使用grid-area：网格名字；进行合并<h3 id="改变（主轴方向），项目垂直排列"><a href="#改变（主轴方向），项目垂直排列" class="headerlink" title="改变（主轴方向），项目垂直排列"></a>改变（主轴方向），项目垂直排列</h3>grid-auto-flow:column / row;<br>row dense和colimn dense<br>这两个值主要用于，默认下项目指定位置以后，剩下的项目怎么自动放置<h3 id="单元格内容对齐方式"><a href="#单元格内容对齐方式" class="headerlink" title="单元格内容对齐方式"></a>单元格内容对齐方式</h3>justify-items:start / end / center / stretch;<br>align-items:start/ end / center /stretch</li></ul></li></ul><p><strong>复合写法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">place-items:&lt;align-items&gt;  &lt;justify-items&gt;  </span><br><span class="line">start :对齐单元格的启始边缘</span><br><span class="line">end ：对齐单元格的结束边缘</span><br><span class="line">center ：单元格内部居中</span><br><span class="line">stretch ：拉伸，占满单元格的整个宽度（默认值）</span><br></pre></td></tr></table></figure><h3 id="单元格项目对齐方式"><a href="#单元格项目对齐方式" class="headerlink" title="单元格项目对齐方式"></a>单元格项目对齐方式</h3><p>jusyify-content:start / end / stretch / space-around / space-between / space-evenly;<br>aligen-conter:start / end / stretch / space-around / space-between / space-ecenly;<br><strong>复合写法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">place-conter:&lt;align-content&gt;  &lt;justify-content&gt; </span><br><span class="line">start:对齐容器的起始边框</span><br><span class="line">end:对齐容器结束边框</span><br><span class="line">center：容器内部居中</span><br><span class="line">stretch：项目大小没有指定拉伸占据整个网格容器</span><br><span class="line">space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目于容器边框的间隔大一倍</span><br><span class="line">space-between：项目与项目的间隔相等，项目于容器边框之间没有间隔</span><br><span class="line">space-evenly：项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</span><br></pre></td></tr></table></figure><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="网格线合并"><a href="#网格线合并" class="headerlink" title="网格线合并"></a>网格线合并</h4><p>grid-column-start属性：左边框所在的垂直网格线<br>grid-column-end属性：右边边框所在的垂直网格线<br>grid-row-start属性：上边边框所在的水平网格线<br>grid-row-end属性：下边边框所在的水平网格线<br>吞并旁边的单元格合并<br>grid-column-start:1;起始的位置grid-column-end:2;结束的位置<br>grid-row-start:3;起始的位置grid-row-end:4;结束的位置<br>简写<br>grid-column:1/3;  简写横向列吞并起始是1，结束是3<br>grid-row:1/3;   简写纵向吞并起始是1，结束是3</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>语义化标签</title>
      <link href="/2019/09/28/html/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/09/28/html/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><ul><li>正确的标签做正确的事情！</li><li>HTML语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析</li><li>在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的。</li><li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li></ul><h2 id="常见的标签"><a href="#常见的标签" class="headerlink" title="常见的标签"></a>常见的标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span>页眉通常包括网站标志、主导航、全站链接以及搜索框</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>标记导航，仅对文档中重要的链接群使用</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span>页面主要内容，一个页面只能使用一次</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span>定义外部的内容，其中的内容独立于文档的其余部分</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>定义文档中的节。比如章节、页眉、页脚或文档中的其他部分</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>定义其所处内容之外的内容。如侧栏、文章链接、广告、相关产品列表等</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>页脚，只有当父级是body时，才是整个页面的页脚</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>无序列表     </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>有序列表    </span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span>呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>将其中的文本表示为强调的内容，表现为斜体</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css布局方式</title>
      <link href="/2019/09/28/css/css%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/09/28/css/css%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h2><ul><li>弹性布局<br>总体宽度及其中所有栏的值都以单位编写。这应使布局能够使用浏览器的指定基本字体大小缩放。 栏宽度将变得更宽, 能以任何大小显示更舒适、更可读的行长度</li><li>固定布局<br>总体宽度及其中所有栏的值都以像素单位编写，布局位于用户浏览器的中心</li><li>流体布局<br>总体宽度及其中所有栏的值都以百分比编写，百分比通过用户浏览器窗口的大小计算</li><li>混合布局<br>混合布局组合两种其他类型的布局，弹性和流体。页面的总宽度为 100%,，但侧栏值设置为em单位</li><li>绝对定位布局<br>所有前述布局的外栏使用浮动内容。 而绝对定位布局完全如其名，有绝对定位的外栏。 必须记住, 当使用这些布局时，侧栏会“提出文档流程”, 因而可能有一些不合适的结果</li><li>网格布局<br>网格布局从名字上应该就能理解大致的样子，由行和列组成的表格，就和Excel差不多。网格布局中由一条条水平和竖直的的 网格线 围成一个个格子被称为 单元格 </li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html5新特性</title>
      <link href="/2019/09/28/html/HTML5/"/>
      <url>/2019/09/28/html/HTML5/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5-现在已经不是-SGML-的子集，主要是关于图像，位置，存储，多任务等功能的增加"><a href="#HTML5-现在已经不是-SGML-的子集，主要是关于图像，位置，存储，多任务等功能的增加" class="headerlink" title="HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加"></a>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加</h2><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas<h2 id="移除的元素"><a href="#移除的元素" class="headerlink" title="移除的元素"></a>移除的元素</h2></li><li>纯表现的元素：basefont、big、center、font、 s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes<h2 id="支持HTML5新标签"><a href="#支持HTML5新标签" class="headerlink" title="支持HTML5新标签"></a>支持HTML5新标签</h2>  IE8/IE7/IE6支持通过document.createElement方法产生的标签<br>  可以利用这一特性让这些浏览器支持HTML5新标签<br>  浏览器支持新标签后，还需要添加标签默认的样式</li></ul><p><strong>当然也可以直接使用成熟的框架、比如html5shim</strong></p><h2 id="如何区分-HTML-和-HTML5"><a href="#如何区分-HTML-和-HTML5" class="headerlink" title="如何区分 HTML 和 HTML5"></a>如何区分 HTML 和 HTML5</h2><p>DOCTYPE声明、新增的结构元素、功能元素</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5的离线储存</title>
      <link href="/2019/09/28/html/HTML5%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/"/>
      <url>/2019/09/28/html/HTML5%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5的离线储存"><a href="#HTML5的离线储存" class="headerlink" title="HTML5的离线储存"></a>HTML5的离线储存</h2><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p><ul><li>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示<h2 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h2></li><li>页面头部像下面一样加入一个manifest的属性</li><li>在cache.manifest文件的编写离线存储的资源</li><li>在离线状态时，操作window.applicationCache进行需求实现<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js/app.js</span><br><span class="line">css/style.css</span><br><span class="line">NETWORK:</span><br><span class="line">resourse/logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line">/offline.html</span><br></pre></td></tr></table></figure><h2 id="浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢</h2></li><li>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css3</title>
      <link href="/2019/09/27/css/css3/"/>
      <url>/2019/09/27/css/css3/</url>
      
        <content type="html"><![CDATA[<h2 id="css3边框——圆角效果-border-radius"><a href="#css3边框——圆角效果-border-radius" class="headerlink" title="css3边框——圆角效果 border-radius"></a>css3边框——圆角效果 border-radius</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：<span class="number">5px</span> <span class="number">4px</span> <span class="number">3px</span> <span class="number">2px</span>;<span class="comment">/*四个值分别代表左上角，右上角，右下角，左下角，顺时针*/</span></span><br></pre></td></tr></table></figure><h2 id="css3边框——边框阴影box-shadow"><a href="#css3边框——边框阴影box-shadow" class="headerlink" title="css3边框——边框阴影box-shadow"></a>css3边框——边框阴影box-shadow</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>：X轴偏移量 Y轴偏移量 <span class="selector-attr">[阴影模糊半径]</span> <span class="selector-attr">[阴影扩展半径]</span> <span class="selector-attr">[阴影颜色]</span> <span class="selector-attr">[投影方式]</span>;</span><br></pre></td></tr></table></figure><p>值描述：</p><ul><li><p>X轴偏移量：必需。水平阴影的位置，允许负值</p></li><li><p>Y轴偏移量：必需。垂直阴影的位置，允许负值。</p></li><li><p>阴影模糊半径：可选。模糊距离，其值只能是正值，如果值为0，表示阴影没有模糊效果。</p></li><li><p>阴影扩展半径：可选。阴影的尺寸。</p></li><li><p>阴影颜色：可选。阴影的颜色。省略默认会黑色。</p></li><li><p>投影方式：可选。设置为inset时为内部阴影方式，若省略为外阴影方式。为元素设置外阴影：</p></li></ul><p>为元素设置外阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#333333</span>;</span><br></pre></td></tr></table></figure><p>为元素设置内阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#333333</span> inset;</span><br></pre></td></tr></table></figure><p>为元素添加多个阴影(只需用逗号隔开即可)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">4px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#f00</span>,-<span class="number">4px</span> -<span class="number">2px</span> px <span class="number">#000</span>,<span class="number">0px</span> <span class="number">0px</span> <span class="number">12px</span> <span class="number">5px</span> <span class="number">#33cc00</span> inset;</span><br></pre></td></tr></table></figure><h2 id="css3边框——边框图片"><a href="#css3边框——边框图片" class="headerlink" title="css3边框——边框图片"></a>css3边框——边框图片</h2><p>可以把border-image理解为就是一个切片工具，会自动把用做边框的图片切割。<br> border-image 属性是五个 border-image-* 属性的简写，其语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-image</span>：<span class="attribute">border-image-source</span> <span class="selector-attr">[border-image-slice]</span> <span class="selector-attr">[border-image-width]</span> <span class="selector-attr">[border-image-outset]</span> <span class="selector-attr">[border-image-repeat]</span>;</span><br></pre></td></tr></table></figure><ul><li>border-image-source：定义边框图像的路径；</li><li>border-image-slice：定义边框图像从什么位置开始分割；</li><li>border-image-width：定义边框图像的厚度（宽度）；</li><li>border-image-outset：定义边框图像的外延尺寸（边框图像区域超出边框的量）；</li><li>border-image-repeat：定义边框图像的平铺方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="string">border.png</span>) <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> repeat;</span><br></pre></td></tr></table></figure><h2 id="css3颜色——颜色之RGBA"><a href="#css3颜色——颜色之RGBA" class="headerlink" title="css3颜色——颜色之RGBA"></a>css3颜色——颜色之RGBA</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>:<span class="built_in">rgba</span>(R,G,B,A)</span><br></pre></td></tr></table></figure><p>以上R,G,B三个参数，正整数的取值范围为：0-255。百分数值的取值范围为0.0%-100%。A为透明度参数，取值在0-1之间，不可为负值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);<span class="comment">/*透明度为0.5的白色*/</span></span><br></pre></td></tr></table></figure><h2 id="css3颜色——渐变色彩"><a href="#css3颜色——渐变色彩" class="headerlink" title="css3颜色——渐变色彩"></a>css3颜色——渐变色彩</h2><h3 id="liner-gradient线性渐变"><a href="#liner-gradient线性渐变" class="headerlink" title="liner-gradient线性渐变"></a>liner-gradient线性渐变</h3><p>线性渐变指的是颜色沿一条直线进行渐变（例如右上到下，从左到右等），要创建线性渐变，至少需要定义两个色标（色标指的是想要平滑过渡的颜色），若要创建更加复杂的渐变效果，则需要定义更多的色标。创建线性渐变的基本语法如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">liner-gradient(<span class="selector-tag">to</span> <span class="attribute">bottom</span>,<span class="selector-id">#fff</span>,<span class="selector-id">#999</span>)<span class="comment">/*to bottom渐变方向，后面两个参数表示颜色的起始点和结束点*/</span></span><br></pre></td></tr></table></figure><p>第一个参数为渐变方向，可以用角度的关键词或英文来表示</p><table><thead><tr><th>角度</th><th>英文</th><th>作用</th></tr></thead><tbody><tr><td>0deg</td><td>to top</td><td>从下向上</td></tr><tr><td>90deg</td><td>to right</td><td>从左向右</td></tr><tr><td>180deg</td><td>to bottom</td><td>从上向下</td></tr><tr><td>270deg</td><td>to left</td><td>从右向左</td></tr><tr><td></td><td>to top left</td><td>从右下角到左上角</td></tr><tr><td></td><td>to top right</td><td>从左下角到右上角</td></tr></tbody></table><p>第二个和第三个参数，表示颜色的起始点和结束点，可以有多个颜色值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">liner-gradient</span>(to left,red,orange,yellow,green,blue,indigo,violet);</span><br></pre></td></tr></table></figure><h2 id="CSS3文字与字体——文本的阴影-text-shadow"><a href="#CSS3文字与字体——文本的阴影-text-shadow" class="headerlink" title="CSS3文字与字体——文本的阴影 text-shadow"></a>CSS3文字与字体——文本的阴影 text-shadow</h2><p>text-shadow用来设置文本的阴影效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>:X-offset Y-offset blur color;</span><br></pre></td></tr></table></figure><p>值描述</p><ul><li>X-offset：阴影的水平偏移距离，正值向右偏移，负值向左偏移；</li><li>Y-offset：阴影的垂直偏移距离，正值向下偏移，负值向上偏移；</li><li>blur：阴影的模糊程度，不能是负值，值越大越模糊；</li><li>color：阴影的颜色；</li></ul><h2 id="CSS3文字与字体——-font-size-adjust"><a href="#CSS3文字与字体——-font-size-adjust" class="headerlink" title="CSS3文字与字体—— font-size-adjust"></a>CSS3文字与字体—— font-size-adjust</h2><p>通过指定font-size-adjust属性，浏览器将调整字体大小，无论字体系列（”宋体”性质值0.58）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size-adjust</span>: <span class="number">0.58</span>;</span><br></pre></td></tr></table></figure><p>目前只有Firefox支持 font-size-adjust 属性.<br>值描述：</p><ul><li>number：定义字体的 aspect 值比率。 可使用的公式： 首选字体的字体尺寸 * （font-size-adjust 值 / 可用字体的 aspect 值）=可应用到可用字体的字体尺寸 举例： 如果 14px 的 Verdana（aspect 值是 0.58）不可用，但是某个可用的字体的 aspect 值是 0.46，那么替代字体的尺寸将是 14 * (0.58/0.46) = 17.65px。</li><li>none：默认。如果此字体不可用，则不保持此字体的 x-height。</li><li>inherit：继承父元素的字体大小调整属性</li></ul><h2 id="CSS3背景——background-size-图片的大小"><a href="#CSS3背景——background-size-图片的大小" class="headerlink" title="CSS3背景——background-size 图片的大小"></a>CSS3背景——background-size 图片的大小</h2><p>background-size设置背景图片的大小，以长度或百分比显示，还可以通过cover和contain来对图片进行伸缩。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>:auto|&lt;长度值&gt;|&lt;百分比&gt;|cover|contain</span><br></pre></td></tr></table></figure><h2 id="CSS3变形–旋转-rotate"><a href="#CSS3变形–旋转-rotate" class="headerlink" title="CSS3变形–旋转 rotate()"></a>CSS3变形–旋转 rotate()</h2><p>旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。角度值为正值，顺时针旋转角度值为负值，逆时针旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">45deg</span>)</span><br></pre></td></tr></table></figure><h2 id="CSS3变形–缩放-scale"><a href="#CSS3变形–缩放-scale" class="headerlink" title="CSS3变形–缩放 scale()"></a>CSS3变形–缩放 scale()</h2><p>scale()函数让元素根据中心原点对对象进行缩放。scale(X,Y)使元素水平方向和垂直方向同时缩放scaleX(x)scaleY(y)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ransform:<span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS3多列布局——Columns"><a href="#CSS3多列布局——Columns" class="headerlink" title="CSS3多列布局——Columns"></a>CSS3多列布局——Columns</h2><p>它主要应用在文本的多列布局方面，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">columns</span>：&lt;<span class="attribute">column-width</span>&gt; || &lt;<span class="attribute">column-count</span>&gt;</span><br></pre></td></tr></table></figure><p>值描述：</p><p>column-width：主要用来定义多列中每列的宽度</p><p>column-count：主要用来定义多列中的列数<br> 举例：要显示2栏显示，每栏宽度为200px，代码为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">columns</span>: <span class="number">200px</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，目前所有主流浏览器其该属性都支持，只是仍需加浏览器私有前缀，如-moz,-webkit,-ms,-o等</p><h2 id="CSS3多列布局——column-width-列宽"><a href="#CSS3多列布局——column-width-列宽" class="headerlink" title="CSS3多列布局——column-width 列宽"></a>CSS3多列布局——column-width 列宽</h2><p>column-width的使用和CSS中的width属性一样，不过不同的是，column-width属性在定义元素列宽的时候，既可以单独使用，也可以和多列属性中其他属性配合使用。其基本语法如下所示 ；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-width</span>: auto | &lt;length&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>值描述</p><ul><li>auto：如果column-width设置值为auto或者没有显式的设置值时，元素多列的列宽将由其他属性来决定，比如前面的示例就是由列数column-count来决定。</li><li>length：使用固定值来设置元素列的宽度，其主要是由数值和长度单位组成，不过其值只能是正值，不能为负值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="attribute">column-width</span>:<span class="number">200px</span>; </span><br><span class="line">-moz-<span class="attribute">column-width</span>:<span class="number">200px</span>;</span><br><span class="line">-o-<span class="attribute">column-width</span>:<span class="number">200px</span>; </span><br><span class="line">-ms-<span class="attribute">column-width</span>:<span class="number">200px</span>;  <span class="attribute">column-width</span>:<span class="number">200px</span>;</span><br></pre></td></tr></table></figure><h2 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline-flex;</span><br></pre></td></tr></table></figure><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-flex;</span><br></pre></td></tr></table></figure><h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse</span><br></pre></td></tr></table></figure><ul><li><p><code>row</code>（默认值）：主轴为水平方向，起点在左端。</p></li><li><p><code>row-reverse</code>：主轴为水平方向，起点在右端。</p></li><li><p><code>column</code>：主轴为垂直方向，起点在上沿。</p></li><li><p><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</p></li></ul><h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure><p>它可能取三个值</p><ul><li><code>nowrap</code>（默认）：不换行</li><li><code>wrap</code>：换行，第一行在上方。</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow<code>属性是</code>flex-direction<code>属性和</code>flex-wrap<code>属性的简写形式，默认值为</code>row nowrap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br></pre></td></tr></table></figure><h4 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br></pre></td></tr></table></figure><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li><p><code>flex-start</code>（默认值）：左对齐</p></li><li><p><code>flex-end</code>：右对齐</p></li><li><p><code>center</code>： 居中</p></li><li><p><code>space-between</code>：两端对齐，项目之间的间隔都相等。</p></li><li><p><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p></li></ul><h4 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><p><code>flex-start</code>：交叉轴的起点对齐。</p></li><li><p><code>flex-end</code>：交叉轴的终点对齐。</p></li><li><p><code>center</code>：交叉轴的中点对齐。</p></li><li><p><code>baseline</code>: 项目的第一行文字的基线对齐。</p></li><li><p><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p></li></ul><h4 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h4><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure><p>该属性可能取6个值。</p><ul><li><p><code>flex-start</code>：与交叉轴的起点对齐。</p></li><li><p><code>flex-end</code>：与交叉轴的终点对齐。</p></li><li><p><code>center</code>：与交叉轴的中点对齐。</p></li><li><p><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</p></li><li><p><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p></li><li><p><code>stretch</code>（默认值）：轴线占满整个交叉轴。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>em/px/rem/vh/vw区别</title>
      <link href="/2019/09/27/css/css%E5%8D%95%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/09/27/css/css%E5%8D%95%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="em-px-rem-vh-vw区别"><a href="#em-px-rem-vh-vw区别" class="headerlink" title="em/px/rem/vh/vw区别"></a>em/px/rem/vh/vw区别</h2><p>传统的项目开发中，我们只会用到px、%、em这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性<br>从CSS3开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了rem、vh、vw、vm等一些新的计量单位</p><p>利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等</p><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>在css单位中，可以分为长度单位、绝对单位，如下表所指示</p><table><thead><tr><th>CSS单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><p>这里我们主要讲述px、em、rem、vh、vw</p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p><p>有些人会把px认为是相对长度，原因在于在移动端中存在设备像素比，px实际显示的大小是不确定的</p><p>这里之所以认为px为绝对单位，在于px的大小和元素的其他属性无关</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（1em = 16px）</p><p>为了简化 font-size 的换算，我们需要在css中的 body 选择器中声明font-size= 62.5%，这就使 em 值变为 16px*62.5% = 10px</p><p>这样 12px = 1.2em, 10px = 1em, 也就是说只需要将你的原来的px 数值除以 10，然后换上 em作为单位就行了</p><p>特点：</p><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px<br>举个例子<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">    我是14px=1.4rem<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>我是12px=1.2rem<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>样式为<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;  &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span>  </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.4rem</span>&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.small</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.2rem</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>这时候.big元素的font-size为14px，而.small元素的font-size为12px</li></ul><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem，相对单位，相对的只是HTML根元素font-size的值</p><p>同理，如果想要简化font-size的转化，我们可以在根元素html中加入font-size: 62.5%</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">62.5%</span>;  &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span></span><br></pre></td></tr></table></figure><p>这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助<br>特点：</p><ul><li>rem单位可谓集相对大小和绝对大小的优点于一身</li><li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸<h3 id="vh、vw"><a href="#vh、vw" class="headerlink" title="vh、vw"></a>vh、vw</h3>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，vh则为窗口的高度<br>这里的窗口分成几种情况：</li><li>在桌面端，指的是浏览器的可视区域</li><li>移动端指的就是布局视口</li></ul><p>像vw、vh，比较容易混淆的一个单位是%，不过百分比宽泛的讲是相对于父元素：</p><ul><li>对于普通定位元素就是我们理解的父元素</li><li>对于position: absolute;的元素是相对于已定位的父元素</li><li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>px</strong>：绝对单位，页面按精确像素展示<br><strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算，整个页面内1em不是一个固定的值<br><strong>rem</strong>：相对单位，可理解为root em, 相对根节点html的字体大小来计算<br><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css选择器 优先级 什么属性可以继承</title>
      <link href="/2019/09/27/css/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2019/09/27/css/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是选择器"><a href="#什么是选择器" class="headerlink" title="什么是选择器"></a>什么是选择器</h2><p>CSS选择器是CSS规则的第一部分<br>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式<br>选择器所选择的元素，叫做“选择器的对象”<br>我们从一个Html结构开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于css属性选择器常用的有：</p><ul><li>id选择器（#box），选择id为box的元素</li><li>类选择器（.one），选择类名为one的所有元素</li><li>标签选择器（div），选择标签为div的所有元素</li><li>后代选择器（#box div），选择id为box元素内部所有的div元素</li><li>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</li><li>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</li><li>群组选择器（div,p），选择div、p的所有元素</li></ul><p>还有一些使用频率不多的选择器：</p><ul><li>伪类选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> ：选择未被访问的链接</span><br><span class="line"><span class="selector-pseudo">:visited</span>：选取已被访问的链接</span><br><span class="line"><span class="selector-pseudo">:active</span>：选择活动链接</span><br><span class="line"><span class="selector-pseudo">:hover</span> ：鼠标指针浮动在上面的元素</span><br><span class="line"><span class="selector-pseudo">:focus</span> ：选择具有焦点的</span><br><span class="line"><span class="selector-pseudo">:first</span>-child：父元素的首个子元素</span><br></pre></td></tr></table></figure><ul><li>伪元素选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-letter ：用于选取指定选择器的首字母</span><br><span class="line"><span class="selector-pseudo">:first</span>-line ：选取指定选择器的首行</span><br><span class="line"><span class="selector-pseudo">:before</span> : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br></pre></td></tr></table></figure><ul><li>属性选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attribute]</span> 选择带有attribute属性的元素</span><br><span class="line"><span class="selector-attr">[attribute=value]</span> 选择所有使用attribute=value的元素</span><br><span class="line"><span class="selector-attr">[attribute~=value]</span> 选择attribute属性包含value的元素</span><br><span class="line"><span class="selector-attr">[attribute|=value]</span>：选择attribute属性以value开头的元素</span><br></pre></td></tr></table></figure><p>在CSS3中新增的选择器有如下：</p><ul><li>层次选择器（p~ul），选择前面有p元素的每个ul元素</li><li>伪类选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-of-type 表示一组同级元素中其类型的第一个元素</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span> 表示一组同级元素中其类型的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:only-of-type</span> 表示没有同类型兄弟元素的元素</span><br><span class="line"><span class="selector-pseudo">:only-child</span> 表示没有任何兄弟的元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(n) 根据元素在一组同级中的位置匹配元素</span><br><span class="line"><span class="selector-pseudo">:nth-last-of-type</span>(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 表示一组兄弟元素中的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:root</span> 设置<span class="selector-tag">HTML</span>文档</span><br><span class="line"><span class="selector-pseudo">:empty</span> 指定空的元素</span><br><span class="line"><span class="selector-pseudo">:enabled</span> 选择可用元素</span><br><span class="line"><span class="selector-pseudo">:disabled</span> 选择被禁用元素</span><br><span class="line"><span class="selector-pseudo">:checked</span> 选择选中的元素</span><br><span class="line"><span class="selector-pseudo">:not</span>(selector) 选择与 &lt;selector&gt; 不匹配的所有元素</span><br></pre></td></tr></table></figure><ul><li>属性选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attribute*=value]</span>：选择attribute属性值包含value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute^=value]</span>：选择attribute属性开头为value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute$=value]</span>：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>相信大家对CSS选择器的优先级都不陌生：</p><pre><code>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</code></pre><p>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 A = 1, 否则 A = 0</li><li>B的值等于 ID选择器出现的次数</li><li>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数</li></ul><h3 id="比较规则："><a href="#比较规则：" class="headerlink" title="比较规则："></a>比较规则：</h3><ul><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的<br>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用 <strong>!important</strong></li></ul><h2 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h2><p>在css中，<strong>继承</strong>是指的是给父元素设置一些属性，后代元素会自动拥有这些属性<br>关于继承属性，可以分成:</p><ul><li>字体系列属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:组合字体</span><br><span class="line">font-family:规定元素的字体系列</span><br><span class="line">font-weight:设置字体的粗细</span><br><span class="line">font-size:设置字体的尺寸</span><br><span class="line">font-style:定义字体的风格</span><br><span class="line">font-variant:偏大或偏小的字体</span><br></pre></td></tr></table></figure></li><li>文本系列属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：文本缩进</span><br><span class="line"><span class="attribute">text-align</span>：文本水平对刘</span><br><span class="line"><span class="attribute">line-height</span>：行高</span><br><span class="line"><span class="attribute">word-spacing</span>：增加或减少单词间的空白</span><br><span class="line"><span class="attribute">letter-spacing</span>：增加或减少字符间的空白</span><br><span class="line"><span class="attribute">text-transform</span>：控制文本大小写</span><br><span class="line"><span class="attribute">direction</span>：规定文本的书写方向</span><br><span class="line"><span class="attribute">color</span>：文本颜色</span><br></pre></td></tr></table></figure></li><li>元素可见性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span></span><br></pre></td></tr></table></figure></li><li>表格布局属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">caption-side</span>：定位表格标题位置</span><br><span class="line"><span class="attribute">border-collapse</span>：合并表格边框</span><br><span class="line"><span class="attribute">border-spacing</span>：设置相邻单元格的边框间的距离</span><br><span class="line"><span class="attribute">empty-cells</span>：单元格的边框的出现与消失</span><br><span class="line"><span class="attribute">table-layout</span>：表格的宽度由什么决定</span><br></pre></td></tr></table></figure></li><li>列表属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>：文字前面的小点点样式</span><br><span class="line"><span class="attribute">list-style-position</span>：小点点位置</span><br><span class="line"><span class="attribute">list-style</span>：以上的属性可通过这属性集合</span><br></pre></td></tr></table></figure></li><li>引用<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">quotes</span>：设置嵌套引用的引号类型</span><br></pre></td></tr></table></figure></li><li>光标属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>：箭头可以变成需要的形状</span><br></pre></td></tr></table></figure>继承中比较特殊的几点：</li><li>a 标签的字体颜色不能被继承</li><li>h1-h6标签字体的大下也是不能被继承的<h2 id="无继承的属性"><a href="#无继承的属性" class="headerlink" title="无继承的属性"></a>无继承的属性</h2></li><li>display</li><li>文本属性：vertical-align、text-decoration</li><li>盒子模型的属性：宽度、高度、内外边距、边框等</li><li>背景属性：背景图片、颜色、位置等</li><li>定位属性：浮动、清除浮动、定位position等</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型理解</title>
      <link href="/2019/09/27/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/09/27/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h2><ul><li>当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型，将所有元素表示为一个个矩形的盒子（box）</li><li>一个盒子由四个部分组成：content(内容)、padding(内边距)、border(边框)、margin(外边距)<ul><li>content，即实际内容，显示文本和图像</li><li>boreder，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成</li><li>padding，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的background属性影响</li><li>margin，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域</li></ul></li></ul><p><strong>盒子模型可以分成：</strong></p><ul><li>W3C 标准盒子模型</li><li>IE 怪异盒子模型</li></ul><h2 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h2><ul><li>盒子总宽度 = width + padding + border + margin;</li><li>盒子总高度 = height + padding + border + margin<br>也就是，width/height 只是内容高度，不包含 padding 和 border值</li></ul><h2 id="IE-怪异盒子模型"><a href="#IE-怪异盒子模型" class="headerlink" title="IE 怪异盒子模型"></a>IE 怪异盒子模型</h2><ul><li>盒子总宽度 = width + margin;</li><li>盒子总高度 = height + margin;</li></ul><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><ul><li>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box|border-box|inherit:</span><br></pre></td></tr></table></figure></li><li>content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</li><li>border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致</li><li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html和xhtml</title>
      <link href="/2019/09/27/html/HTML/"/>
      <url>/2019/09/27/html/HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="html是什么"><a href="#html是什么" class="headerlink" title="html是什么"></a>html是什么</h2><ul><li>HTML的全称为超文本标记语言，是一种标记语言。</li><li>HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等<h2 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别"></a>xhtml和html有什么区别</h2></li><li>一个是功能上的差别<ul><li>主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页</li></ul></li><li>另外是书写习惯的差别<ul><li>XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
